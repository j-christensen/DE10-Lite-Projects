
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00000204 memsz 0x00000204 flags r-x
    LOAD off    0x00001224 vaddr 0x00020224 paddr 0x00020228 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000122c vaddr 0x0002022c paddr 0x0002022c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00001228  2**0
                  CONTENTS
  2 .text         000001ec  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0002020c  0002020c  0000120c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00020224  00020228  00001224  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0002022c  0002022c  0000122c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00020238  00020238  00001228  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001258  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005afc  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013a0  00000000  00000000  00006ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000013b2  00000000  00000000  0000825c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00009610  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b99  00000000  00000000  000097a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001a1  00000000  00000000  0000a339  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  0000a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b342  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000b345  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b348  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b349  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000b34a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000b353  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000b35c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000b365  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000033  00000000  00000000  0000b371  2**0
                  CONTENTS, READONLY
 26 .jdi          00004981  00000000  00000000  0000b3a4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00061181  00000000  00000000  0000fd25  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
0002020c l    d  .rodata	00000000 .rodata
00020224 l    d  .rwdata	00000000 .rwdata
0002022c l    d  .bss	00000000 .bss
00020238 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00020128 g     F .text	0000002c alt_main
00020228 g       *ABS*	00000000 __flash_rwdata_start
00020154 g     F .text	00000038 alt_putstr
00020224 g     O .rwdata	00000004 jtag_uart
000201e8 g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00020230 g     O .bss	00000004 alt_argv
00028224 g       *ABS*	00000000 _gp
00020238 g       *ABS*	00000000 __bss_end
000201e0 g     F .text	00000004 alt_dcache_flush_all
00020228 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
00020224 g       *ABS*	00000000 __ram_rodata_end
00020238 g       *ABS*	00000000 end
000386a0 g       *ABS*	00000000 __alt_stack_pointer
000201b0 g     F .text	00000030 altera_avalon_jtag_uart_write
00020020 g     F .text	0000003c _start
000201ac g     F .text	00000004 alt_sys_init
00020224 g       *ABS*	00000000 __ram_rwdata_start
0002020c g       *ABS*	00000000 __ram_rodata_start
00020238 g       *ABS*	00000000 __alt_stack_base
0002022c g       *ABS*	00000000 __bss_start
0002005c g     F .text	00000018 main
0002022c g     O .bss	00000004 alt_envp
0002020c g       *ABS*	00000000 __flash_rodata_start
0002018c g     F .text	00000020 alt_irq_init
00020234 g     O .bss	00000004 alt_argc
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020228 g       *ABS*	00000000 _edata
00020238 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
000386a0 g       *ABS*	00000000 __alt_data_end
0002000c g       .entry	00000000 _exit
000201f0 g     F .text	0000001c strlen
000201e4 g     F .text	00000004 alt_icache_flush_all
00020074 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a08914 	ori	gp,gp,33316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	10808b14 	ori	r2,r2,556

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c08e14 	ori	r3,r3,568

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00200740 	call	20074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00201280 	call	20128 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <alt_after_alt_main>

0002005c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
   2005c:	010000b4 	movhi	r4,2
{ 
   20060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
   20064:	21008304 	addi	r4,r4,524
{ 
   20068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
   2006c:	00201540 	call	20154 <alt_putstr>

  /* Event loop never exits. */
  while (1);
   20070:	003fff06 	br	20070 <main+0x14>

00020074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20074:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20078:	008000b4 	movhi	r2,2
   2007c:	00c000b4 	movhi	r3,2
   20080:	dfc00015 	stw	ra,0(sp)
   20084:	10808904 	addi	r2,r2,548
   20088:	18c08a04 	addi	r3,r3,552
   2008c:	10c00326 	beq	r2,r3,2009c <alt_load+0x28>
  {
    while( to != end )
   20090:	010000b4 	movhi	r4,2
   20094:	21008a04 	addi	r4,r4,552
   20098:	1100141e 	bne	r2,r4,200ec <alt_load+0x78>
  if (to != from)
   2009c:	008000b4 	movhi	r2,2
   200a0:	00c000b4 	movhi	r3,2
   200a4:	10800804 	addi	r2,r2,32
   200a8:	18c00804 	addi	r3,r3,32
   200ac:	10c00326 	beq	r2,r3,200bc <alt_load+0x48>
    while( to != end )
   200b0:	010000b4 	movhi	r4,2
   200b4:	21000804 	addi	r4,r4,32
   200b8:	1100111e 	bne	r2,r4,20100 <alt_load+0x8c>
  if (to != from)
   200bc:	008000b4 	movhi	r2,2
   200c0:	00c000b4 	movhi	r3,2
   200c4:	10808304 	addi	r2,r2,524
   200c8:	18c08304 	addi	r3,r3,524
   200cc:	10c00326 	beq	r2,r3,200dc <alt_load+0x68>
    while( to != end )
   200d0:	010000b4 	movhi	r4,2
   200d4:	21008904 	addi	r4,r4,548
   200d8:	11000e1e 	bne	r2,r4,20114 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   200dc:	00201e00 	call	201e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   200e0:	dfc00017 	ldw	ra,0(sp)
   200e4:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   200e8:	00201e41 	jmpi	201e4 <alt_icache_flush_all>
    {
      *to++ = *from++;
   200ec:	19400017 	ldw	r5,0(r3)
   200f0:	10800104 	addi	r2,r2,4
   200f4:	18c00104 	addi	r3,r3,4
   200f8:	117fff15 	stw	r5,-4(r2)
   200fc:	003fe606 	br	20098 <alt_load+0x24>
   20100:	19400017 	ldw	r5,0(r3)
   20104:	10800104 	addi	r2,r2,4
   20108:	18c00104 	addi	r3,r3,4
   2010c:	117fff15 	stw	r5,-4(r2)
   20110:	003fe906 	br	200b8 <alt_load+0x44>
   20114:	19400017 	ldw	r5,0(r3)
   20118:	10800104 	addi	r2,r2,4
   2011c:	18c00104 	addi	r3,r3,4
   20120:	117fff15 	stw	r5,-4(r2)
   20124:	003fec06 	br	200d8 <alt_load+0x64>

00020128 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20128:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2012c:	0009883a 	mov	r4,zero
{
   20130:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   20134:	002018c0 	call	2018c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20138:	00201ac0 	call	201ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   2013c:	d1a00217 	ldw	r6,-32760(gp)
   20140:	d1600317 	ldw	r5,-32756(gp)
   20144:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   20148:	dfc00017 	ldw	ra,0(sp)
   2014c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   20150:	002005c1 	jmpi	2005c <main>

00020154 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   20154:	defffe04 	addi	sp,sp,-8
   20158:	dc000015 	stw	r16,0(sp)
   2015c:	dfc00115 	stw	ra,4(sp)
   20160:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   20164:	00201f00 	call	201f0 <strlen>
   20168:	010000b4 	movhi	r4,2
   2016c:	000f883a 	mov	r7,zero
   20170:	100d883a 	mov	r6,r2
   20174:	800b883a 	mov	r5,r16
   20178:	21008904 	addi	r4,r4,548
#else
    return fputs(str, stdout);
#endif
#endif
}
   2017c:	dfc00117 	ldw	ra,4(sp)
   20180:	dc000017 	ldw	r16,0(sp)
   20184:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   20188:	00201b01 	jmpi	201b0 <altera_avalon_jtag_uart_write>

0002018c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2018c:	deffff04 	addi	sp,sp,-4
   20190:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   20194:	00201e80 	call	201e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20198:	00800044 	movi	r2,1
   2019c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   201a0:	dfc00017 	ldw	ra,0(sp)
   201a4:	dec00104 	addi	sp,sp,4
   201a8:	f800283a 	ret

000201ac <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
   201ac:	f800283a 	ret

000201b0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   201b0:	21000017 	ldw	r4,0(r4)
{
   201b4:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   201b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   201bc:	29800136 	bltu	r5,r6,201c4 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   201c0:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   201c4:	20c00137 	ldwio	r3,4(r4)
   201c8:	18ffffec 	andhi	r3,r3,65535
   201cc:	183ffb26 	beq	r3,zero,201bc <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   201d0:	28c00007 	ldb	r3,0(r5)
   201d4:	29400044 	addi	r5,r5,1
   201d8:	20c00035 	stwio	r3,0(r4)
   201dc:	003ff706 	br	201bc <altera_avalon_jtag_uart_write+0xc>

000201e0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   201e0:	f800283a 	ret

000201e4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   201e4:	f800283a 	ret

000201e8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   201e8:	000170fa 	wrctl	ienable,zero
}
   201ec:	f800283a 	ret

000201f0 <strlen>:
   201f0:	2005883a 	mov	r2,r4
   201f4:	10c00007 	ldb	r3,0(r2)
   201f8:	1800021e 	bne	r3,zero,20204 <strlen+0x14>
   201fc:	1105c83a 	sub	r2,r2,r4
   20200:	f800283a 	ret
   20204:	10800044 	addi	r2,r2,1
   20208:	003ffa06 	br	201f4 <strlen+0x4>
